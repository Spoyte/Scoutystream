/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface VideoAccessControlInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkAccess"
      | "checkAccessBatch"
      | "emergencyWithdraw"
      | "getUserAnalytics"
      | "getVideoAnalytics"
      | "grantAccess"
      | "grantAccessBatch"
      | "hasAccess"
      | "owner"
      | "renounceOwnership"
      | "revokeAccess"
      | "totalAccessGrants"
      | "transferOwnership"
      | "userPurchaseCount"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccessGranted"
      | "AccessRevoked"
      | "BatchAccessGranted"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "checkAccess",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAccessBatch",
    values: [AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAnalytics",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVideoAnalytics",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantAccess",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantAccessBatch",
    values: [AddressLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAccess",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAccess",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAccessGrants",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userPurchaseCount",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAccessBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAnalytics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVideoAnalytics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAccessBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasAccess", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAccessGrants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPurchaseCount",
    data: BytesLike
  ): Result;
}

export namespace AccessGrantedEvent {
  export type InputTuple = [
    user: AddressLike,
    videoId: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [user: string, videoId: bigint, timestamp: bigint];
  export interface OutputObject {
    user: string;
    videoId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccessRevokedEvent {
  export type InputTuple = [
    user: AddressLike,
    videoId: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [user: string, videoId: bigint, timestamp: bigint];
  export interface OutputObject {
    user: string;
    videoId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchAccessGrantedEvent {
  export type InputTuple = [
    users: AddressLike[],
    videoId: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    users: string[],
    videoId: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    users: string[];
    videoId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VideoAccessControl extends BaseContract {
  connect(runner?: ContractRunner | null): VideoAccessControl;
  waitForDeployment(): Promise<this>;

  interface: VideoAccessControlInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkAccess: TypedContractMethod<
    [user: AddressLike, videoId: BigNumberish],
    [boolean],
    "view"
  >;

  checkAccessBatch: TypedContractMethod<
    [user: AddressLike, videoIds: BigNumberish[]],
    [boolean[]],
    "view"
  >;

  emergencyWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  getUserAnalytics: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getVideoAnalytics: TypedContractMethod<
    [videoId: BigNumberish],
    [bigint],
    "view"
  >;

  grantAccess: TypedContractMethod<
    [user: AddressLike, videoId: BigNumberish],
    [void],
    "nonpayable"
  >;

  grantAccessBatch: TypedContractMethod<
    [users: AddressLike[], videoId: BigNumberish],
    [void],
    "nonpayable"
  >;

  hasAccess: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  revokeAccess: TypedContractMethod<
    [user: AddressLike, videoId: BigNumberish],
    [void],
    "nonpayable"
  >;

  totalAccessGrants: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userPurchaseCount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkAccess"
  ): TypedContractMethod<
    [user: AddressLike, videoId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkAccessBatch"
  ): TypedContractMethod<
    [user: AddressLike, videoIds: BigNumberish[]],
    [boolean[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getUserAnalytics"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVideoAnalytics"
  ): TypedContractMethod<[videoId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantAccess"
  ): TypedContractMethod<
    [user: AddressLike, videoId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "grantAccessBatch"
  ): TypedContractMethod<
    [users: AddressLike[], videoId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasAccess"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeAccess"
  ): TypedContractMethod<
    [user: AddressLike, videoId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalAccessGrants"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userPurchaseCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "AccessGranted"
  ): TypedContractEvent<
    AccessGrantedEvent.InputTuple,
    AccessGrantedEvent.OutputTuple,
    AccessGrantedEvent.OutputObject
  >;
  getEvent(
    key: "AccessRevoked"
  ): TypedContractEvent<
    AccessRevokedEvent.InputTuple,
    AccessRevokedEvent.OutputTuple,
    AccessRevokedEvent.OutputObject
  >;
  getEvent(
    key: "BatchAccessGranted"
  ): TypedContractEvent<
    BatchAccessGrantedEvent.InputTuple,
    BatchAccessGrantedEvent.OutputTuple,
    BatchAccessGrantedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "AccessGranted(address,uint256,uint256)": TypedContractEvent<
      AccessGrantedEvent.InputTuple,
      AccessGrantedEvent.OutputTuple,
      AccessGrantedEvent.OutputObject
    >;
    AccessGranted: TypedContractEvent<
      AccessGrantedEvent.InputTuple,
      AccessGrantedEvent.OutputTuple,
      AccessGrantedEvent.OutputObject
    >;

    "AccessRevoked(address,uint256,uint256)": TypedContractEvent<
      AccessRevokedEvent.InputTuple,
      AccessRevokedEvent.OutputTuple,
      AccessRevokedEvent.OutputObject
    >;
    AccessRevoked: TypedContractEvent<
      AccessRevokedEvent.InputTuple,
      AccessRevokedEvent.OutputTuple,
      AccessRevokedEvent.OutputObject
    >;

    "BatchAccessGranted(address[],uint256,uint256)": TypedContractEvent<
      BatchAccessGrantedEvent.InputTuple,
      BatchAccessGrantedEvent.OutputTuple,
      BatchAccessGrantedEvent.OutputObject
    >;
    BatchAccessGranted: TypedContractEvent<
      BatchAccessGrantedEvent.InputTuple,
      BatchAccessGrantedEvent.OutputTuple,
      BatchAccessGrantedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
